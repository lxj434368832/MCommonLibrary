// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXAISVessel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXAISVessel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* VesselInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VesselInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VesselTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VesselTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIS_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPFD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NAVI_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXAISVessel_2eproto() {
  protobuf_AddDesc_ZCHXAISVessel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXAISVessel.proto");
  GOOGLE_CHECK(file != NULL);
  VesselInfo_descriptor_ = file->message_type(0);
  static const int VesselInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, imo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, callsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shipname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, cargotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, vendorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shiplength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shipwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tobow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tostern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, toport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tostarboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, fixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, draught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, utc_),
  };
  VesselInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VesselInfo_descriptor_,
      VesselInfo::default_instance_,
      VesselInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VesselInfo));
  VesselTrack_descriptor_ = file->message_type(1);
  static const int VesselTrack_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, navstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, utc_),
  };
  VesselTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VesselTrack_descriptor_,
      VesselTrack::default_instance_,
      VesselTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VesselTrack));
  AIS_descriptor_ = file->message_type(2);
  static const int AIS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, vesselinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, vesseltrack_),
  };
  AIS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIS_descriptor_,
      AIS::default_instance_,
      AIS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIS));
  AISList_descriptor_ = file->message_type(3);
  static const int AISList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, ais_),
  };
  AISList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISList_descriptor_,
      AISList::default_instance_,
      AISList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISList));
  EPFD_descriptor_ = file->enum_type(0);
  NAVI_STATUS_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXAISVessel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VesselInfo_descriptor_, &VesselInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VesselTrack_descriptor_, &VesselTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIS_descriptor_, &AIS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISList_descriptor_, &AISList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXAISVessel_2eproto() {
  delete VesselInfo::default_instance_;
  delete VesselInfo_reflection_;
  delete VesselTrack::default_instance_;
  delete VesselTrack_reflection_;
  delete AIS::default_instance_;
  delete AIS_reflection_;
  delete AISList::default_instance_;
  delete AISList_reflection_;
}

void protobuf_AddDesc_ZCHXAISVessel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ZCHXAISVessel.proto\022\027com.zhichenhaixin"
    ".proto\"\364\002\n\nVesselInfo\022\n\n\002id\030\001 \002(\t\022\014\n\004mms"
    "i\030\002 \002(\005\022\020\n\010shipType\030\003 \002(\t\022\013\n\003imo\030\004 \002(\005\022\020"
    "\n\010callSign\030\005 \002(\t\022\020\n\010shipName\030\006 \002(\t\022\021\n\tca"
    "rgoType\030\007 \002(\005\022\017\n\007country\030\010 \002(\t\022\020\n\010vendor"
    "ID\030\t \002(\t\022\022\n\nshipLength\030\n \002(\005\022\021\n\tshipWidt"
    "h\030\013 \002(\005\022\r\n\005toBow\030\014 \002(\005\022\017\n\007toStern\030\r \002(\005\022"
    "\016\n\006toPort\030\016 \002(\005\022\023\n\013toStarboard\030\017 \002(\005\022.\n\007"
    "fixType\030\020 \002(\0162\035.com.zhichenhaixin.proto."
    "EPFD\022\013\n\003eta\030\021 \002(\t\022\017\n\007draught\030\022 \002(\002\022\014\n\004de"
    "st\030\023 \002(\t\022\013\n\003UTC\030\024 \002(\004\"\321\001\n\013VesselTrack\022\n\n"
    "\002id\030\001 \002(\t\022\014\n\004mmsi\030\002 \002(\005\022\020\n\010shiptype\030\003 \002("
    "\t\0227\n\tnavStatus\030\004 \002(\0162$.com.zhichenhaixin"
    ".proto.NAVI_STATUS\022\013\n\003rot\030\005 \002(\002\022\013\n\003sog\030\006"
    " \002(\002\022\013\n\003lon\030\007 \002(\002\022\013\n\003lat\030\010 \002(\002\022\013\n\003cog\030\t "
    "\002(\002\022\017\n\007heading\030\n \002(\002\022\013\n\003UTC\030\013 \002(\004\"\231\001\n\003AI"
    "S\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceId\030\002 \002(\t\0227\n\nves"
    "selInfo\030\003 \001(\0132#.com.zhichenhaixin.proto."
    "VesselInfo\0229\n\013vesselTrack\030\004 \001(\0132$.com.zh"
    "ichenhaixin.proto.VesselTrack\"A\n\007AISList"
    "\022\013\n\003UTC\030\001 \002(\004\022)\n\003ais\030\002 \003(\0132\034.com.zhichen"
    "haixin.proto.AIS*\237\001\n\004EPFD\022\r\n\tUNDEFINED\020\000"
    "\022\007\n\003GPS\020\001\022\013\n\007GLONASS\020\002\022\034\n\030COMBINED_GPS_A"
    "ND_GLONASS\020\003\022\013\n\007LORAN_C\020\004\022\n\n\006CHAYKA\020\005\022 \n"
    "\034INTEGRATED_NAVIGATION_SYSTEM\020\006\022\014\n\010SURVE"
    "YED\020\007\022\013\n\007GALILEO\020\010*\260\003\n\013NAVI_STATUS\022\032\n\026UN"
    "DER_WAY_USING_ENGINE\020\000\022\r\n\tAT_ANCHOR\020\001\022\025\n"
    "\021NOT_UNDER_COMMAND\020\002\022\030\n\024RESTRICTED_MANOE"
    "UVER\020\003\022\032\n\026CONSTRAINED_BY_DRAUGHT\020\004\022\n\n\006MO"
    "ORED\020\005\022\013\n\007AGROUND\020\006\022\026\n\022ENGAGED_IN_FISHIN"
    "G\020\007\022\025\n\021UNDER_WAY_SAILING\020\010\022)\n%RESERVED_F"
    "OR_FUTURE_AMENDMENT_FOR_HSC\020\t\022)\n%RESERVE"
    "D_FOR_FUTURE_AMENDMENT_FOR_WIG\020\n\022\035\n\031RESE"
    "RVED_FOR_FUTURE_USE_1\020\013\022\035\n\031RESERVED_FOR_"
    "FUTURE_USE_2\020\014\022\035\n\031RESERVED_FOR_FUTURE_US"
    "E_3\020\r\022\035\n\031RESERVED_FOR_FUTURE_USE_4\020\016\022\017\n\013"
    "NOT_DEFINED\020\017", 1453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXAISVessel.proto", &protobuf_RegisterTypes);
  VesselInfo::default_instance_ = new VesselInfo();
  VesselTrack::default_instance_ = new VesselTrack();
  AIS::default_instance_ = new AIS();
  AISList::default_instance_ = new AISList();
  VesselInfo::default_instance_->InitAsDefaultInstance();
  VesselTrack::default_instance_->InitAsDefaultInstance();
  AIS::default_instance_->InitAsDefaultInstance();
  AISList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXAISVessel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXAISVessel_2eproto {
  StaticDescriptorInitializer_ZCHXAISVessel_2eproto() {
    protobuf_AddDesc_ZCHXAISVessel_2eproto();
  }
} static_descriptor_initializer_ZCHXAISVessel_2eproto_;
const ::google::protobuf::EnumDescriptor* EPFD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPFD_descriptor_;
}
bool EPFD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NAVI_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAVI_STATUS_descriptor_;
}
bool NAVI_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int VesselInfo::kIdFieldNumber;
const int VesselInfo::kMmsiFieldNumber;
const int VesselInfo::kShipTypeFieldNumber;
const int VesselInfo::kImoFieldNumber;
const int VesselInfo::kCallSignFieldNumber;
const int VesselInfo::kShipNameFieldNumber;
const int VesselInfo::kCargoTypeFieldNumber;
const int VesselInfo::kCountryFieldNumber;
const int VesselInfo::kVendorIDFieldNumber;
const int VesselInfo::kShipLengthFieldNumber;
const int VesselInfo::kShipWidthFieldNumber;
const int VesselInfo::kToBowFieldNumber;
const int VesselInfo::kToSternFieldNumber;
const int VesselInfo::kToPortFieldNumber;
const int VesselInfo::kToStarboardFieldNumber;
const int VesselInfo::kFixTypeFieldNumber;
const int VesselInfo::kEtaFieldNumber;
const int VesselInfo::kDraughtFieldNumber;
const int VesselInfo::kDestFieldNumber;
const int VesselInfo::kUTCFieldNumber;
#endif  // !_MSC_VER

VesselInfo::VesselInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VesselInfo)
}

void VesselInfo::InitAsDefaultInstance() {
}

VesselInfo::VesselInfo(const VesselInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselInfo)
}

void VesselInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = 0;
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imo_ = 0;
  callsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cargotype_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiplength_ = 0;
  shipwidth_ = 0;
  tobow_ = 0;
  tostern_ = 0;
  toport_ = 0;
  tostarboard_ = 0;
  fixtype_ = 0;
  eta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  draught_ = 0;
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VesselInfo::~VesselInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselInfo)
  SharedDtor();
}

void VesselInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callsign_;
  }
  if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shipname_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendorid_;
  }
  if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eta_;
  }
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void VesselInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VesselInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VesselInfo_descriptor_;
}

const VesselInfo& VesselInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

VesselInfo* VesselInfo::default_instance_ = NULL;

VesselInfo* VesselInfo::New() const {
  return new VesselInfo;
}

void VesselInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VesselInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mmsi_, imo_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
    if (has_callsign()) {
      if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callsign_->clear();
      }
    }
    if (has_shipname()) {
      if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shipname_->clear();
      }
    }
    cargotype_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(shipwidth_, fixtype_);
    if (has_vendorid()) {
      if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendorid_->clear();
      }
    }
    shiplength_ = 0;
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(utc_, draught_);
    if (has_eta()) {
      if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eta_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VesselInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VesselInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shipType;
        break;
      }

      // required string shipType = 3;
      case 3: {
        if (tag == 26) {
         parse_shipType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_imo;
        break;
      }

      // required int32 imo = 4;
      case 4: {
        if (tag == 32) {
         parse_imo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imo_)));
          set_has_imo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_callSign;
        break;
      }

      // required string callSign = 5;
      case 5: {
        if (tag == 42) {
         parse_callSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callsign().data(), this->callsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "callsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_shipName;
        break;
      }

      // required string shipName = 6;
      case 6: {
        if (tag == 50) {
         parse_shipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shipname().data(), this->shipname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shipname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cargoType;
        break;
      }

      // required int32 cargoType = 7;
      case 7: {
        if (tag == 56) {
         parse_cargoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargotype_)));
          set_has_cargotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country;
        break;
      }

      // required string country = 8;
      case 8: {
        if (tag == 66) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vendorID;
        break;
      }

      // required string vendorID = 9;
      case 9: {
        if (tag == 74) {
         parse_vendorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendorid().data(), this->vendorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendorid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_shipLength;
        break;
      }

      // required int32 shipLength = 10;
      case 10: {
        if (tag == 80) {
         parse_shipLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shiplength_)));
          set_has_shiplength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_shipWidth;
        break;
      }

      // required int32 shipWidth = 11;
      case 11: {
        if (tag == 88) {
         parse_shipWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shipwidth_)));
          set_has_shipwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_toBow;
        break;
      }

      // required int32 toBow = 12;
      case 12: {
        if (tag == 96) {
         parse_toBow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tobow_)));
          set_has_tobow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_toStern;
        break;
      }

      // required int32 toStern = 13;
      case 13: {
        if (tag == 104) {
         parse_toStern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostern_)));
          set_has_tostern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_toPort;
        break;
      }

      // required int32 toPort = 14;
      case 14: {
        if (tag == 112) {
         parse_toPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toport_)));
          set_has_toport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_toStarboard;
        break;
      }

      // required int32 toStarboard = 15;
      case 15: {
        if (tag == 120) {
         parse_toStarboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostarboard_)));
          set_has_tostarboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fixType;
        break;
      }

      // required .com.zhichenhaixin.proto.EPFD fixType = 16;
      case 16: {
        if (tag == 128) {
         parse_fixType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::EPFD_IsValid(value)) {
            set_fixtype(static_cast< ::com::zhichenhaixin::proto::EPFD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_eta;
        break;
      }

      // required string eta = 17;
      case 17: {
        if (tag == 138) {
         parse_eta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eta().data(), this->eta().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eta");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_draught;
        break;
      }

      // required float draught = 18;
      case 18: {
        if (tag == 149) {
         parse_draught:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &draught_)));
          set_has_draught();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_dest;
        break;
      }

      // required string dest = 19;
      case 19: {
        if (tag == 154) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 20;
      case 20: {
        if (tag == 160) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VesselInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VesselInfo)
  return false;
#undef DO_
}

void VesselInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VesselInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mmsi(), output);
  }

  // required string shipType = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required int32 imo = 4;
  if (has_imo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imo(), output);
  }

  // required string callSign = 5;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->callsign(), output);
  }

  // required string shipName = 6;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->shipname(), output);
  }

  // required int32 cargoType = 7;
  if (has_cargotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cargotype(), output);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // required string vendorID = 9;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->vendorid(), output);
  }

  // required int32 shipLength = 10;
  if (has_shiplength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shiplength(), output);
  }

  // required int32 shipWidth = 11;
  if (has_shipwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shipwidth(), output);
  }

  // required int32 toBow = 12;
  if (has_tobow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tobow(), output);
  }

  // required int32 toStern = 13;
  if (has_tostern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tostern(), output);
  }

  // required int32 toPort = 14;
  if (has_toport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->toport(), output);
  }

  // required int32 toStarboard = 15;
  if (has_tostarboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tostarboard(), output);
  }

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  if (has_fixtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->fixtype(), output);
  }

  // required string eta = 17;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->eta(), output);
  }

  // required float draught = 18;
  if (has_draught()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->draught(), output);
  }

  // required string dest = 19;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->dest(), output);
  }

  // required uint64 UTC = 20;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VesselInfo)
}

::google::protobuf::uint8* VesselInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mmsi(), target);
  }

  // required string shipType = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required int32 imo = 4;
  if (has_imo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imo(), target);
  }

  // required string callSign = 5;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->callsign(), target);
  }

  // required string shipName = 6;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->shipname(), target);
  }

  // required int32 cargoType = 7;
  if (has_cargotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cargotype(), target);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // required string vendorID = 9;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->vendorid(), target);
  }

  // required int32 shipLength = 10;
  if (has_shiplength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shiplength(), target);
  }

  // required int32 shipWidth = 11;
  if (has_shipwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shipwidth(), target);
  }

  // required int32 toBow = 12;
  if (has_tobow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tobow(), target);
  }

  // required int32 toStern = 13;
  if (has_tostern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tostern(), target);
  }

  // required int32 toPort = 14;
  if (has_toport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->toport(), target);
  }

  // required int32 toStarboard = 15;
  if (has_tostarboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tostarboard(), target);
  }

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  if (has_fixtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->fixtype(), target);
  }

  // required string eta = 17;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->eta(), target);
  }

  // required float draught = 18;
  if (has_draught()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->draught(), target);
  }

  // required string dest = 19;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->dest(), target);
  }

  // required uint64 UTC = 20;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselInfo)
  return target;
}

int VesselInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required string shipType = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required int32 imo = 4;
    if (has_imo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imo());
    }

    // required string callSign = 5;
    if (has_callsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callsign());
    }

    // required string shipName = 6;
    if (has_shipname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipname());
    }

    // required int32 cargoType = 7;
    if (has_cargotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargotype());
    }

    // required string country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string vendorID = 9;
    if (has_vendorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendorid());
    }

    // required int32 shipLength = 10;
    if (has_shiplength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shiplength());
    }

    // required int32 shipWidth = 11;
    if (has_shipwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shipwidth());
    }

    // required int32 toBow = 12;
    if (has_tobow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tobow());
    }

    // required int32 toStern = 13;
    if (has_tostern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostern());
    }

    // required int32 toPort = 14;
    if (has_toport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toport());
    }

    // required int32 toStarboard = 15;
    if (has_tostarboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostarboard());
    }

    // required .com.zhichenhaixin.proto.EPFD fixType = 16;
    if (has_fixtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fixtype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string eta = 17;
    if (has_eta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eta());
    }

    // required float draught = 18;
    if (has_draught()) {
      total_size += 2 + 4;
    }

    // required string dest = 19;
    if (has_dest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required uint64 UTC = 20;
    if (has_utc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VesselInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VesselInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VesselInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VesselInfo::MergeFrom(const VesselInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_imo()) {
      set_imo(from.imo());
    }
    if (from.has_callsign()) {
      set_callsign(from.callsign());
    }
    if (from.has_shipname()) {
      set_shipname(from.shipname());
    }
    if (from.has_cargotype()) {
      set_cargotype(from.cargotype());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vendorid()) {
      set_vendorid(from.vendorid());
    }
    if (from.has_shiplength()) {
      set_shiplength(from.shiplength());
    }
    if (from.has_shipwidth()) {
      set_shipwidth(from.shipwidth());
    }
    if (from.has_tobow()) {
      set_tobow(from.tobow());
    }
    if (from.has_tostern()) {
      set_tostern(from.tostern());
    }
    if (from.has_toport()) {
      set_toport(from.toport());
    }
    if (from.has_tostarboard()) {
      set_tostarboard(from.tostarboard());
    }
    if (from.has_fixtype()) {
      set_fixtype(from.fixtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_draught()) {
      set_draught(from.draught());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VesselInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselInfo::CopyFrom(const VesselInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void VesselInfo::Swap(VesselInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(imo_, other->imo_);
    std::swap(callsign_, other->callsign_);
    std::swap(shipname_, other->shipname_);
    std::swap(cargotype_, other->cargotype_);
    std::swap(country_, other->country_);
    std::swap(vendorid_, other->vendorid_);
    std::swap(shiplength_, other->shiplength_);
    std::swap(shipwidth_, other->shipwidth_);
    std::swap(tobow_, other->tobow_);
    std::swap(tostern_, other->tostern_);
    std::swap(toport_, other->toport_);
    std::swap(tostarboard_, other->tostarboard_);
    std::swap(fixtype_, other->fixtype_);
    std::swap(eta_, other->eta_);
    std::swap(draught_, other->draught_);
    std::swap(dest_, other->dest_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VesselInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VesselInfo_descriptor_;
  metadata.reflection = VesselInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VesselTrack::kIdFieldNumber;
const int VesselTrack::kMmsiFieldNumber;
const int VesselTrack::kShiptypeFieldNumber;
const int VesselTrack::kNavStatusFieldNumber;
const int VesselTrack::kRotFieldNumber;
const int VesselTrack::kSogFieldNumber;
const int VesselTrack::kLonFieldNumber;
const int VesselTrack::kLatFieldNumber;
const int VesselTrack::kCogFieldNumber;
const int VesselTrack::kHeadingFieldNumber;
const int VesselTrack::kUTCFieldNumber;
#endif  // !_MSC_VER

VesselTrack::VesselTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VesselTrack)
}

void VesselTrack::InitAsDefaultInstance() {
}

VesselTrack::VesselTrack(const VesselTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselTrack)
}

void VesselTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = 0;
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navstatus_ = 0;
  rot_ = 0;
  sog_ = 0;
  lon_ = 0;
  lat_ = 0;
  cog_ = 0;
  heading_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VesselTrack::~VesselTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselTrack)
  SharedDtor();
}

void VesselTrack::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (this != default_instance_) {
  }
}

void VesselTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VesselTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VesselTrack_descriptor_;
}

const VesselTrack& VesselTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

VesselTrack* VesselTrack::default_instance_ = NULL;

VesselTrack* VesselTrack::New() const {
  return new VesselTrack;
}

void VesselTrack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VesselTrack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mmsi_, lat_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
  }
  ZR_(cog_, utc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VesselTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VesselTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shiptype;
        break;
      }

      // required string shiptype = 3;
      case 3: {
        if (tag == 26) {
         parse_shiptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_navStatus;
        break;
      }

      // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_navStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(value)) {
            set_navstatus(static_cast< ::com::zhichenhaixin::proto::NAVI_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rot;
        break;
      }

      // required float rot = 5;
      case 5: {
        if (tag == 45) {
         parse_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_)));
          set_has_rot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sog;
        break;
      }

      // required float sog = 6;
      case 6: {
        if (tag == 53) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_lon;
        break;
      }

      // required float lon = 7;
      case 7: {
        if (tag == 61) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_lat;
        break;
      }

      // required float lat = 8;
      case 8: {
        if (tag == 69) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cog;
        break;
      }

      // required float cog = 9;
      case 9: {
        if (tag == 77) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_heading;
        break;
      }

      // required float heading = 10;
      case 10: {
        if (tag == 85) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 11;
      case 11: {
        if (tag == 88) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VesselTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VesselTrack)
  return false;
#undef DO_
}

void VesselTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VesselTrack)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mmsi(), output);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->navstatus(), output);
  }

  // required float rot = 5;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot(), output);
  }

  // required float sog = 6;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sog(), output);
  }

  // required float lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lon(), output);
  }

  // required float lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->lat(), output);
  }

  // required float cog = 9;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cog(), output);
  }

  // required float heading = 10;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VesselTrack)
}

::google::protobuf::uint8* VesselTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselTrack)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mmsi(), target);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->navstatus(), target);
  }

  // required float rot = 5;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot(), target);
  }

  // required float sog = 6;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sog(), target);
  }

  // required float lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lon(), target);
  }

  // required float lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->lat(), target);
  }

  // required float cog = 9;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cog(), target);
  }

  // required float heading = 10;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselTrack)
  return target;
}

int VesselTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required string shiptype = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    if (has_navstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navstatus());
    }

    // required float rot = 5;
    if (has_rot()) {
      total_size += 1 + 4;
    }

    // required float sog = 6;
    if (has_sog()) {
      total_size += 1 + 4;
    }

    // required float lon = 7;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // required float lat = 8;
    if (has_lat()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float cog = 9;
    if (has_cog()) {
      total_size += 1 + 4;
    }

    // required float heading = 10;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // required uint64 UTC = 11;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VesselTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VesselTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VesselTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VesselTrack::MergeFrom(const VesselTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_navstatus()) {
      set_navstatus(from.navstatus());
    }
    if (from.has_rot()) {
      set_rot(from.rot());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VesselTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselTrack::CopyFrom(const VesselTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void VesselTrack::Swap(VesselTrack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(navstatus_, other->navstatus_);
    std::swap(rot_, other->rot_);
    std::swap(sog_, other->sog_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(cog_, other->cog_);
    std::swap(heading_, other->heading_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VesselTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VesselTrack_descriptor_;
  metadata.reflection = VesselTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIS::kFlagFieldNumber;
const int AIS::kSourceIdFieldNumber;
const int AIS::kVesselInfoFieldNumber;
const int AIS::kVesselTrackFieldNumber;
#endif  // !_MSC_VER

AIS::AIS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AIS)
}

void AIS::InitAsDefaultInstance() {
  vesselinfo_ = const_cast< ::com::zhichenhaixin::proto::VesselInfo*>(&::com::zhichenhaixin::proto::VesselInfo::default_instance());
  vesseltrack_ = const_cast< ::com::zhichenhaixin::proto::VesselTrack*>(&::com::zhichenhaixin::proto::VesselTrack::default_instance());
}

AIS::AIS(const AIS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AIS)
}

void AIS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vesselinfo_ = NULL;
  vesseltrack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIS::~AIS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AIS)
  SharedDtor();
}

void AIS::SharedDtor() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (this != default_instance_) {
    delete vesselinfo_;
    delete vesseltrack_;
  }
}

void AIS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIS_descriptor_;
}

const AIS& AIS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AIS* AIS::default_instance_ = NULL;

AIS* AIS::New() const {
  return new AIS;
}

void AIS::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    flag_ = 0;
    if (has_sourceid()) {
      if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceid_->clear();
      }
    }
    if (has_vesselinfo()) {
      if (vesselinfo_ != NULL) vesselinfo_->::com::zhichenhaixin::proto::VesselInfo::Clear();
    }
    if (has_vesseltrack()) {
      if (vesseltrack_ != NULL) vesseltrack_->::com::zhichenhaixin::proto::VesselTrack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AIS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourceId;
        break;
      }

      // required string sourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_sourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vesselInfo;
        break;
      }

      // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_vesselInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vesselinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vesselTrack;
        break;
      }

      // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
      case 4: {
        if (tag == 34) {
         parse_vesselTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vesseltrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AIS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AIS)
  return false;
#undef DO_
}

void AIS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AIS)
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceid(), output);
  }

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  if (has_vesselinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vesselinfo(), output);
  }

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  if (has_vesseltrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vesseltrack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AIS)
}

::google::protobuf::uint8* AIS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AIS)
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceid(), target);
  }

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  if (has_vesselinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vesselinfo(), target);
  }

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  if (has_vesseltrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vesseltrack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AIS)
  return target;
}

int AIS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceid());
    }

    // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
    if (has_vesselinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vesselinfo());
    }

    // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
    if (has_vesseltrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vesseltrack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIS::MergeFrom(const AIS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_vesselinfo()) {
      mutable_vesselinfo()->::com::zhichenhaixin::proto::VesselInfo::MergeFrom(from.vesselinfo());
    }
    if (from.has_vesseltrack()) {
      mutable_vesseltrack()->::com::zhichenhaixin::proto::VesselTrack::MergeFrom(from.vesseltrack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIS::CopyFrom(const AIS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vesselinfo()) {
    if (!this->vesselinfo().IsInitialized()) return false;
  }
  if (has_vesseltrack()) {
    if (!this->vesseltrack().IsInitialized()) return false;
  }
  return true;
}

void AIS::Swap(AIS* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(vesselinfo_, other->vesselinfo_);
    std::swap(vesseltrack_, other->vesseltrack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIS_descriptor_;
  metadata.reflection = AIS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISList::kUTCFieldNumber;
const int AISList::kAisFieldNumber;
#endif  // !_MSC_VER

AISList::AISList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISList)
}

void AISList::InitAsDefaultInstance() {
}

AISList::AISList(const AISList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISList)
}

void AISList::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISList::~AISList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISList)
  SharedDtor();
}

void AISList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AISList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISList_descriptor_;
}

const AISList& AISList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISList* AISList::default_instance_ = NULL;

AISList* AISList::New() const {
  return new AISList;
}

void AISList::Clear() {
  utc_ = GOOGLE_ULONGLONG(0);
  ais_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 UTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ais;
        break;
      }

      // repeated .com.zhichenhaixin.proto.AIS ais = 2;
      case 2: {
        if (tag == 18) {
         parse_ais:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ais()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ais;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISList)
  return false;
#undef DO_
}

void AISList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISList)
  // required uint64 UTC = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  for (int i = 0; i < this->ais_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ais(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISList)
}

::google::protobuf::uint8* AISList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISList)
  // required uint64 UTC = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  for (int i = 0; i < this->ais_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ais(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISList)
  return target;
}

int AISList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 UTC = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  total_size += 1 * this->ais_size();
  for (int i = 0; i < this->ais_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ais(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISList::MergeFrom(const AISList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ais_.MergeFrom(from.ais_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISList::CopyFrom(const AISList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ais())) return false;
  return true;
}

void AISList::Swap(AISList* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    ais_.Swap(&other->ais_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISList_descriptor_;
  metadata.reflection = AISList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
