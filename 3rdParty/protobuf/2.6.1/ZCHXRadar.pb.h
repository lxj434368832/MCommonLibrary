// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#ifndef PROTOBUF_ZCHXRadar_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadar_2eproto();
void protobuf_AssignDesc_ZCHXRadar_2eproto();
void protobuf_ShutdownFile_ZCHXRadar_2eproto();

class TrackPoint;
class RadarSurfaceTrack;
class Spectrum;
class LineSpectrum;
class SectorSpectrum;
class RadarVideo;

enum MSGTYP {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
const MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
const MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
const int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor();
inline const ::std::string& MSGTYP_Name(MSGTYP value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSGTYP_descriptor(), value);
}
inline bool MSGTYP_Parse(
    const ::std::string& name, MSGTYP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
const CNF CNF_MIN = CONFIRMED_TRACK;
const CNF CNF_MAX = UNKNOWN_TRACK;
const int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::google::protobuf::EnumDescriptor* CNF_descriptor();
inline const ::std::string& CNF_Name(CNF value) {
  return ::google::protobuf::internal::NameOfEnum(
    CNF_descriptor(), value);
}
inline bool CNF_Parse(
    const ::std::string& name, CNF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
const CST CST_MIN = CST_UNDEFINED;
const CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
const int CST_ARRAYSIZE = CST_MAX + 1;

const ::google::protobuf::EnumDescriptor* CST_descriptor();
inline const ::std::string& CST_Name(CST value) {
  return ::google::protobuf::internal::NameOfEnum(
    CST_descriptor(), value);
}
inline bool CST_Parse(
    const ::std::string& name, CST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
const STH STH_MIN = MEASURED_POSITION;
const STH STH_MAX = SMOOTHED_POSITION;
const int STH_ARRAYSIZE = STH_MAX + 1;

const ::google::protobuf::EnumDescriptor* STH_descriptor();
inline const ::std::string& STH_Name(STH value) {
  return ::google::protobuf::internal::NameOfEnum(
    STH_descriptor(), value);
}
inline bool STH_Parse(
    const ::std::string& name, STH* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
// ===================================================================

class TrackPoint : public ::google::protobuf::Message {
 public:
  TrackPoint();
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPoint& default_instance();

  void Swap(TrackPoint* other);

  // implements Message ----------------------------------------------

  TrackPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 systemAreaCode = 1;
  inline bool has_systemareacode() const;
  inline void clear_systemareacode();
  static const int kSystemAreaCodeFieldNumber = 1;
  inline ::google::protobuf::int32 systemareacode() const;
  inline void set_systemareacode(::google::protobuf::int32 value);

  // required int32 systemIdentificationCode = 2;
  inline bool has_systemidentificationcode() const;
  inline void clear_systemidentificationcode();
  static const int kSystemIdentificationCodeFieldNumber = 2;
  inline ::google::protobuf::int32 systemidentificationcode() const;
  inline void set_systemidentificationcode(::google::protobuf::int32 value);

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  inline ::com::zhichenhaixin::proto::MSGTYP messagetype() const;
  inline void set_messagetype(::com::zhichenhaixin::proto::MSGTYP value);

  // required uint32 trackNumber = 4;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 tracknumber() const;
  inline void set_tracknumber(::google::protobuf::uint32 value);

  // required float cartesianPosX = 5;
  inline bool has_cartesianposx() const;
  inline void clear_cartesianposx();
  static const int kCartesianPosXFieldNumber = 5;
  inline float cartesianposx() const;
  inline void set_cartesianposx(float value);

  // required float cartesianPosY = 6;
  inline bool has_cartesianposy() const;
  inline void clear_cartesianposy();
  static const int kCartesianPosYFieldNumber = 6;
  inline float cartesianposy() const;
  inline void set_cartesianposy(float value);

  // required double wgs84PosLat = 7;
  inline bool has_wgs84poslat() const;
  inline void clear_wgs84poslat();
  static const int kWgs84PosLatFieldNumber = 7;
  inline double wgs84poslat() const;
  inline void set_wgs84poslat(double value);

  // required double wgs84PosLong = 8;
  inline bool has_wgs84poslong() const;
  inline void clear_wgs84poslong();
  static const int kWgs84PosLongFieldNumber = 8;
  inline double wgs84poslong() const;
  inline void set_wgs84poslong(double value);

  // required float timeOfDay = 9;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 9;
  inline float timeofday() const;
  inline void set_timeofday(float value);

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 10;
  inline ::com::zhichenhaixin::proto::CNF tracktype() const;
  inline void set_tracktype(::com::zhichenhaixin::proto::CNF value);

  // optional bool trackLastReport = 11;
  inline bool has_tracklastreport() const;
  inline void clear_tracklastreport();
  static const int kTrackLastReportFieldNumber = 11;
  inline bool tracklastreport() const;
  inline void set_tracklastreport(bool value);

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  inline bool has_extrapolation() const;
  inline void clear_extrapolation();
  static const int kExtrapolationFieldNumber = 12;
  inline ::com::zhichenhaixin::proto::CST extrapolation() const;
  inline void set_extrapolation(::com::zhichenhaixin::proto::CST value);

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  inline bool has_trackpositioncode() const;
  inline void clear_trackpositioncode();
  static const int kTrackPositionCodeFieldNumber = 13;
  inline ::com::zhichenhaixin::proto::STH trackpositioncode() const;
  inline void set_trackpositioncode(::com::zhichenhaixin::proto::STH value);

  // optional float sigmaX = 14;
  inline bool has_sigmax() const;
  inline void clear_sigmax();
  static const int kSigmaXFieldNumber = 14;
  inline float sigmax() const;
  inline void set_sigmax(float value);

  // optional float sigmaY = 15;
  inline bool has_sigmay() const;
  inline void clear_sigmay();
  static const int kSigmaYFieldNumber = 15;
  inline float sigmay() const;
  inline void set_sigmay(float value);

  // optional float sigmaXY = 16;
  inline bool has_sigmaxy() const;
  inline void clear_sigmaxy();
  static const int kSigmaXYFieldNumber = 16;
  inline float sigmaxy() const;
  inline void set_sigmaxy(float value);

  // optional float ampOfPriPlot = 17;
  inline bool has_ampofpriplot() const;
  inline void clear_ampofpriplot();
  static const int kAmpOfPriPlotFieldNumber = 17;
  inline float ampofpriplot() const;
  inline void set_ampofpriplot(float value);

  // required double cartesianTrkVel_vx = 18;
  inline bool has_cartesiantrkvel_vx() const;
  inline void clear_cartesiantrkvel_vx();
  static const int kCartesianTrkVelVxFieldNumber = 18;
  inline double cartesiantrkvel_vx() const;
  inline void set_cartesiantrkvel_vx(double value);

  // required double cartesianTrkVel_vy = 19;
  inline bool has_cartesiantrkvel_vy() const;
  inline void clear_cartesiantrkvel_vy();
  static const int kCartesianTrkVelVyFieldNumber = 19;
  inline double cartesiantrkvel_vy() const;
  inline void set_cartesiantrkvel_vy(double value);

  // required double cog = 20;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 20;
  inline double cog() const;
  inline void set_cog(double value);

  // required double sog = 21;
  inline bool has_sog() const;
  inline void clear_sog();
  static const int kSogFieldNumber = 21;
  inline double sog() const;
  inline void set_sog(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.TrackPoint)
 private:
  inline void set_has_systemareacode();
  inline void clear_has_systemareacode();
  inline void set_has_systemidentificationcode();
  inline void clear_has_systemidentificationcode();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_cartesianposx();
  inline void clear_has_cartesianposx();
  inline void set_has_cartesianposy();
  inline void clear_has_cartesianposy();
  inline void set_has_wgs84poslat();
  inline void clear_has_wgs84poslat();
  inline void set_has_wgs84poslong();
  inline void clear_has_wgs84poslong();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_tracklastreport();
  inline void clear_has_tracklastreport();
  inline void set_has_extrapolation();
  inline void clear_has_extrapolation();
  inline void set_has_trackpositioncode();
  inline void clear_has_trackpositioncode();
  inline void set_has_sigmax();
  inline void clear_has_sigmax();
  inline void set_has_sigmay();
  inline void clear_has_sigmay();
  inline void set_has_sigmaxy();
  inline void clear_has_sigmaxy();
  inline void set_has_ampofpriplot();
  inline void clear_has_ampofpriplot();
  inline void set_has_cartesiantrkvel_vx();
  inline void clear_has_cartesiantrkvel_vx();
  inline void set_has_cartesiantrkvel_vy();
  inline void clear_has_cartesiantrkvel_vy();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_sog();
  inline void clear_has_sog();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 systemareacode_;
  ::google::protobuf::int32 systemidentificationcode_;
  int messagetype_;
  ::google::protobuf::uint32 tracknumber_;
  float cartesianposx_;
  float cartesianposy_;
  double wgs84poslat_;
  double wgs84poslong_;
  float timeofday_;
  int tracktype_;
  bool tracklastreport_;
  int extrapolation_;
  int trackpositioncode_;
  float sigmax_;
  float sigmay_;
  float sigmaxy_;
  double cartesiantrkvel_vx_;
  double cartesiantrkvel_vy_;
  double cog_;
  double sog_;
  float ampofpriplot_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static TrackPoint* default_instance_;
};
// -------------------------------------------------------------------

class RadarSurfaceTrack : public ::google::protobuf::Message {
 public:
  RadarSurfaceTrack();
  virtual ~RadarSurfaceTrack();

  RadarSurfaceTrack(const RadarSurfaceTrack& from);

  inline RadarSurfaceTrack& operator=(const RadarSurfaceTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarSurfaceTrack& default_instance();

  void Swap(RadarSurfaceTrack* other);

  // implements Message ----------------------------------------------

  RadarSurfaceTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarSurfaceTrack& from);
  void MergeFrom(const RadarSurfaceTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string sourceId = 2;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  inline const ::std::string& sourceid() const;
  inline void set_sourceid(const ::std::string& value);
  inline void set_sourceid(const char* value);
  inline void set_sourceid(const char* value, size_t size);
  inline ::std::string* mutable_sourceid();
  inline ::std::string* release_sourceid();
  inline void set_allocated_sourceid(::std::string* sourceid);

  // required uint64 UTC = 3;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 3;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  inline int trackpoints_size() const;
  inline void clear_trackpoints();
  static const int kTrackPointsFieldNumber = 5;
  inline const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  inline ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  inline ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarSurfaceTrack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sourceid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarSurfaceTrack* default_instance_;
};
// -------------------------------------------------------------------

class Spectrum : public ::google::protobuf::Message {
 public:
  Spectrum();
  virtual ~Spectrum();

  Spectrum(const Spectrum& from);

  inline Spectrum& operator=(const Spectrum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Spectrum& default_instance();

  void Swap(Spectrum* other);

  // implements Message ----------------------------------------------

  Spectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spectrum& from);
  void MergeFrom(const Spectrum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double longitude = 1;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required int32 amplitude = 3;
  inline bool has_amplitude() const;
  inline void clear_amplitude();
  static const int kAmplitudeFieldNumber = 3;
  inline ::google::protobuf::int32 amplitude() const;
  inline void set_amplitude(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Spectrum)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_amplitude();
  inline void clear_has_amplitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 amplitude_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static Spectrum* default_instance_;
};
// -------------------------------------------------------------------

class LineSpectrum : public ::google::protobuf::Message {
 public:
  LineSpectrum();
  virtual ~LineSpectrum();

  LineSpectrum(const LineSpectrum& from);

  inline LineSpectrum& operator=(const LineSpectrum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSpectrum& default_instance();

  void Swap(LineSpectrum* other);

  // implements Message ----------------------------------------------

  LineSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineSpectrum& from);
  void MergeFrom(const LineSpectrum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double azimuth = 1;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 1;
  inline double azimuth() const;
  inline void set_azimuth(double value);

  // repeated .com.zhichenhaixin.proto.Spectrum spectrums = 2;
  inline int spectrums_size() const;
  inline void clear_spectrums();
  static const int kSpectrumsFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::Spectrum& spectrums(int index) const;
  inline ::com::zhichenhaixin::proto::Spectrum* mutable_spectrums(int index);
  inline ::com::zhichenhaixin::proto::Spectrum* add_spectrums();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Spectrum >&
      spectrums() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Spectrum >*
      mutable_spectrums();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.LineSpectrum)
 private:
  inline void set_has_azimuth();
  inline void clear_has_azimuth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double azimuth_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Spectrum > spectrums_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static LineSpectrum* default_instance_;
};
// -------------------------------------------------------------------

class SectorSpectrum : public ::google::protobuf::Message {
 public:
  SectorSpectrum();
  virtual ~SectorSpectrum();

  SectorSpectrum(const SectorSpectrum& from);

  inline SectorSpectrum& operator=(const SectorSpectrum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SectorSpectrum& default_instance();

  void Swap(SectorSpectrum* other);

  // implements Message ----------------------------------------------

  SectorSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectorSpectrum& from);
  void MergeFrom(const SectorSpectrum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sectorIndex = 1;
  inline bool has_sectorindex() const;
  inline void clear_sectorindex();
  static const int kSectorIndexFieldNumber = 1;
  inline ::google::protobuf::int32 sectorindex() const;
  inline void set_sectorindex(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.LineSpectrum lineSpectrums = 2;
  inline int linespectrums_size() const;
  inline void clear_linespectrums();
  static const int kLineSpectrumsFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::LineSpectrum& linespectrums(int index) const;
  inline ::com::zhichenhaixin::proto::LineSpectrum* mutable_linespectrums(int index);
  inline ::com::zhichenhaixin::proto::LineSpectrum* add_linespectrums();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >&
      linespectrums() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >*
      mutable_linespectrums();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.SectorSpectrum)
 private:
  inline void set_has_sectorindex();
  inline void clear_has_sectorindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum > linespectrums_;
  ::google::protobuf::int32 sectorindex_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static SectorSpectrum* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideo : public ::google::protobuf::Message {
 public:
  RadarVideo();
  virtual ~RadarVideo();

  RadarVideo(const RadarVideo& from);

  inline RadarVideo& operator=(const RadarVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideo& default_instance();

  void Swap(RadarVideo* other);

  // implements Message ----------------------------------------------

  RadarVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideo& from);
  void MergeFrom(const RadarVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string sourceId = 2;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  inline const ::std::string& sourceid() const;
  inline void set_sourceid(const ::std::string& value);
  inline void set_sourceid(const char* value);
  inline void set_sourceid(const char* value, size_t size);
  inline ::std::string* mutable_sourceid();
  inline ::std::string* release_sourceid();
  inline void set_allocated_sourceid(::std::string* sourceid);

  // required uint64 UTC = 3;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 3;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.SectorSpectrum sectorSpectrums = 5;
  inline int sectorspectrums_size() const;
  inline void clear_sectorspectrums();
  static const int kSectorSpectrumsFieldNumber = 5;
  inline const ::com::zhichenhaixin::proto::SectorSpectrum& sectorspectrums(int index) const;
  inline ::com::zhichenhaixin::proto::SectorSpectrum* mutable_sectorspectrums(int index);
  inline ::com::zhichenhaixin::proto::SectorSpectrum* add_sectorspectrums();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::SectorSpectrum >&
      sectorspectrums() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::SectorSpectrum >*
      mutable_sectorspectrums();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sourceid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::SectorSpectrum > sectorspectrums_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarVideo* default_instance_;
};
// ===================================================================


// ===================================================================

// TrackPoint

// required int32 systemAreaCode = 1;
inline bool TrackPoint::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackPoint::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackPoint::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackPoint::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
inline ::google::protobuf::int32 TrackPoint::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
  return systemareacode_;
}
inline void TrackPoint::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool TrackPoint::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackPoint::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackPoint::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackPoint::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
inline ::google::protobuf::int32 TrackPoint::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
  return systemidentificationcode_;
}
inline void TrackPoint::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
}

// required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
inline bool TrackPoint::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackPoint::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackPoint::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackPoint::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::com::zhichenhaixin::proto::MSGTYP TrackPoint::messagetype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.messageType)
  return static_cast< ::com::zhichenhaixin::proto::MSGTYP >(messagetype_);
}
inline void TrackPoint::set_messagetype(::com::zhichenhaixin::proto::MSGTYP value) {
  assert(::com::zhichenhaixin::proto::MSGTYP_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.messageType)
}

// required uint32 trackNumber = 4;
inline bool TrackPoint::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackPoint::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackPoint::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackNumber)
  return tracknumber_;
}
inline void TrackPoint::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackNumber)
}

// required float cartesianPosX = 5;
inline bool TrackPoint::has_cartesianposx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackPoint::set_has_cartesianposx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackPoint::clear_has_cartesianposx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackPoint::clear_cartesianposx() {
  cartesianposx_ = 0;
  clear_has_cartesianposx();
}
inline float TrackPoint::cartesianposx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
  return cartesianposx_;
}
inline void TrackPoint::set_cartesianposx(float value) {
  set_has_cartesianposx();
  cartesianposx_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
}

// required float cartesianPosY = 6;
inline bool TrackPoint::has_cartesianposy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackPoint::set_has_cartesianposy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackPoint::clear_has_cartesianposy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackPoint::clear_cartesianposy() {
  cartesianposy_ = 0;
  clear_has_cartesianposy();
}
inline float TrackPoint::cartesianposy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
  return cartesianposy_;
}
inline void TrackPoint::set_cartesianposy(float value) {
  set_has_cartesianposy();
  cartesianposy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
}

// required double wgs84PosLat = 7;
inline bool TrackPoint::has_wgs84poslat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackPoint::set_has_wgs84poslat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackPoint::clear_has_wgs84poslat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackPoint::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  clear_has_wgs84poslat();
}
inline double TrackPoint::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
  return wgs84poslat_;
}
inline void TrackPoint::set_wgs84poslat(double value) {
  set_has_wgs84poslat();
  wgs84poslat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
}

// required double wgs84PosLong = 8;
inline bool TrackPoint::has_wgs84poslong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackPoint::set_has_wgs84poslong() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackPoint::clear_has_wgs84poslong() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackPoint::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  clear_has_wgs84poslong();
}
inline double TrackPoint::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
  return wgs84poslong_;
}
inline void TrackPoint::set_wgs84poslong(double value) {
  set_has_wgs84poslong();
  wgs84poslong_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
}

// required float timeOfDay = 9;
inline bool TrackPoint::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackPoint::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackPoint::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackPoint::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float TrackPoint::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
  return timeofday_;
}
inline void TrackPoint::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
}

// optional .com.zhichenhaixin.proto.CNF trackType = 10;
inline bool TrackPoint::has_tracktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackPoint::set_has_tracktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackPoint::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackPoint::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
inline ::com::zhichenhaixin::proto::CNF TrackPoint::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackType)
  return static_cast< ::com::zhichenhaixin::proto::CNF >(tracktype_);
}
inline void TrackPoint::set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  assert(::com::zhichenhaixin::proto::CNF_IsValid(value));
  set_has_tracktype();
  tracktype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackType)
}

// optional bool trackLastReport = 11;
inline bool TrackPoint::has_tracklastreport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackPoint::set_has_tracklastreport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackPoint::clear_has_tracklastreport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackPoint::clear_tracklastreport() {
  tracklastreport_ = false;
  clear_has_tracklastreport();
}
inline bool TrackPoint::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
  return tracklastreport_;
}
inline void TrackPoint::set_tracklastreport(bool value) {
  set_has_tracklastreport();
  tracklastreport_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
}

// optional .com.zhichenhaixin.proto.CST extrapolation = 12;
inline bool TrackPoint::has_extrapolation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackPoint::set_has_extrapolation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackPoint::clear_has_extrapolation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackPoint::clear_extrapolation() {
  extrapolation_ = 0;
  clear_has_extrapolation();
}
inline ::com::zhichenhaixin::proto::CST TrackPoint::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.extrapolation)
  return static_cast< ::com::zhichenhaixin::proto::CST >(extrapolation_);
}
inline void TrackPoint::set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  assert(::com::zhichenhaixin::proto::CST_IsValid(value));
  set_has_extrapolation();
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.extrapolation)
}

// optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
inline bool TrackPoint::has_trackpositioncode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrackPoint::set_has_trackpositioncode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrackPoint::clear_has_trackpositioncode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrackPoint::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  clear_has_trackpositioncode();
}
inline ::com::zhichenhaixin::proto::STH TrackPoint::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
  return static_cast< ::com::zhichenhaixin::proto::STH >(trackpositioncode_);
}
inline void TrackPoint::set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  assert(::com::zhichenhaixin::proto::STH_IsValid(value));
  set_has_trackpositioncode();
  trackpositioncode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
}

// optional float sigmaX = 14;
inline bool TrackPoint::has_sigmax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrackPoint::set_has_sigmax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrackPoint::clear_has_sigmax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrackPoint::clear_sigmax() {
  sigmax_ = 0;
  clear_has_sigmax();
}
inline float TrackPoint::sigmax() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaX)
  return sigmax_;
}
inline void TrackPoint::set_sigmax(float value) {
  set_has_sigmax();
  sigmax_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaX)
}

// optional float sigmaY = 15;
inline bool TrackPoint::has_sigmay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrackPoint::set_has_sigmay() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrackPoint::clear_has_sigmay() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrackPoint::clear_sigmay() {
  sigmay_ = 0;
  clear_has_sigmay();
}
inline float TrackPoint::sigmay() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaY)
  return sigmay_;
}
inline void TrackPoint::set_sigmay(float value) {
  set_has_sigmay();
  sigmay_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaY)
}

// optional float sigmaXY = 16;
inline bool TrackPoint::has_sigmaxy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrackPoint::set_has_sigmaxy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrackPoint::clear_has_sigmaxy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrackPoint::clear_sigmaxy() {
  sigmaxy_ = 0;
  clear_has_sigmaxy();
}
inline float TrackPoint::sigmaxy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
  return sigmaxy_;
}
inline void TrackPoint::set_sigmaxy(float value) {
  set_has_sigmaxy();
  sigmaxy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
}

// optional float ampOfPriPlot = 17;
inline bool TrackPoint::has_ampofpriplot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrackPoint::set_has_ampofpriplot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrackPoint::clear_has_ampofpriplot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrackPoint::clear_ampofpriplot() {
  ampofpriplot_ = 0;
  clear_has_ampofpriplot();
}
inline float TrackPoint::ampofpriplot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
  return ampofpriplot_;
}
inline void TrackPoint::set_ampofpriplot(float value) {
  set_has_ampofpriplot();
  ampofpriplot_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
}

// required double cartesianTrkVel_vx = 18;
inline bool TrackPoint::has_cartesiantrkvel_vx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vx() {
  cartesiantrkvel_vx_ = 0;
  clear_has_cartesiantrkvel_vx();
}
inline double TrackPoint::cartesiantrkvel_vx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
  return cartesiantrkvel_vx_;
}
inline void TrackPoint::set_cartesiantrkvel_vx(double value) {
  set_has_cartesiantrkvel_vx();
  cartesiantrkvel_vx_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
}

// required double cartesianTrkVel_vy = 19;
inline bool TrackPoint::has_cartesiantrkvel_vy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vy() {
  cartesiantrkvel_vy_ = 0;
  clear_has_cartesiantrkvel_vy();
}
inline double TrackPoint::cartesiantrkvel_vy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
  return cartesiantrkvel_vy_;
}
inline void TrackPoint::set_cartesiantrkvel_vy(double value) {
  set_has_cartesiantrkvel_vy();
  cartesiantrkvel_vy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
}

// required double cog = 20;
inline bool TrackPoint::has_cog() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrackPoint::set_has_cog() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrackPoint::clear_has_cog() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrackPoint::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double TrackPoint::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cog)
  return cog_;
}
inline void TrackPoint::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cog)
}

// required double sog = 21;
inline bool TrackPoint::has_sog() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrackPoint::set_has_sog() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrackPoint::clear_has_sog() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrackPoint::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double TrackPoint::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sog)
  return sog_;
}
inline void TrackPoint::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sog)
}

// -------------------------------------------------------------------

// RadarSurfaceTrack

// required int32 flag = 1;
inline bool RadarSurfaceTrack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarSurfaceTrack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarSurfaceTrack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarSurfaceTrack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
  return flag_;
}
inline void RadarSurfaceTrack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
}

// required string sourceId = 2;
inline bool RadarSurfaceTrack::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarSurfaceTrack::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarSurfaceTrack::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarSurfaceTrack::clear_sourceid() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_->clear();
  }
  clear_has_sourceid();
}
inline const ::std::string& RadarSurfaceTrack::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return *sourceid_;
}
inline void RadarSurfaceTrack::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline ::std::string* RadarSurfaceTrack::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return sourceid_;
}
inline ::std::string* RadarSurfaceTrack::release_sourceid() {
  clear_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourceid_;
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarSurfaceTrack::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (sourceid) {
    set_has_sourceid();
    sourceid_ = sourceid;
  } else {
    clear_has_sourceid();
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarSurfaceTrack::has_utc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarSurfaceTrack::set_has_utc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarSurfaceTrack::clear_has_utc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarSurfaceTrack::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarSurfaceTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
  return utc_;
}
inline void RadarSurfaceTrack::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
}

// required int32 length = 4;
inline bool RadarSurfaceTrack::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarSurfaceTrack::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarSurfaceTrack::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarSurfaceTrack::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
  return length_;
}
inline void RadarSurfaceTrack::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
inline int RadarSurfaceTrack::trackpoints_size() const {
  return trackpoints_.size();
}
inline void RadarSurfaceTrack::clear_trackpoints() {
  trackpoints_.Clear();
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Get(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
RadarSurfaceTrack::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
RadarSurfaceTrack::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return &trackpoints_;
}

// -------------------------------------------------------------------

// Spectrum

// required double longitude = 1;
inline bool Spectrum::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Spectrum::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Spectrum::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Spectrum::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Spectrum::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Spectrum.longitude)
  return longitude_;
}
inline void Spectrum::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Spectrum.longitude)
}

// required double latitude = 2;
inline bool Spectrum::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Spectrum::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Spectrum::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Spectrum::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Spectrum::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Spectrum.latitude)
  return latitude_;
}
inline void Spectrum::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Spectrum.latitude)
}

// required int32 amplitude = 3;
inline bool Spectrum::has_amplitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Spectrum::set_has_amplitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Spectrum::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Spectrum::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline ::google::protobuf::int32 Spectrum::amplitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Spectrum.amplitude)
  return amplitude_;
}
inline void Spectrum::set_amplitude(::google::protobuf::int32 value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Spectrum.amplitude)
}

// -------------------------------------------------------------------

// LineSpectrum

// required double azimuth = 1;
inline bool LineSpectrum::has_azimuth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineSpectrum::set_has_azimuth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineSpectrum::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineSpectrum::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline double LineSpectrum::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LineSpectrum.azimuth)
  return azimuth_;
}
inline void LineSpectrum::set_azimuth(double value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LineSpectrum.azimuth)
}

// repeated .com.zhichenhaixin.proto.Spectrum spectrums = 2;
inline int LineSpectrum::spectrums_size() const {
  return spectrums_.size();
}
inline void LineSpectrum::clear_spectrums() {
  spectrums_.Clear();
}
inline const ::com::zhichenhaixin::proto::Spectrum& LineSpectrum::spectrums(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LineSpectrum.spectrums)
  return spectrums_.Get(index);
}
inline ::com::zhichenhaixin::proto::Spectrum* LineSpectrum::mutable_spectrums(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.LineSpectrum.spectrums)
  return spectrums_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::Spectrum* LineSpectrum::add_spectrums() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.LineSpectrum.spectrums)
  return spectrums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Spectrum >&
LineSpectrum::spectrums() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.LineSpectrum.spectrums)
  return spectrums_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Spectrum >*
LineSpectrum::mutable_spectrums() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.LineSpectrum.spectrums)
  return &spectrums_;
}

// -------------------------------------------------------------------

// SectorSpectrum

// required int32 sectorIndex = 1;
inline bool SectorSpectrum::has_sectorindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectorSpectrum::set_has_sectorindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectorSpectrum::clear_has_sectorindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectorSpectrum::clear_sectorindex() {
  sectorindex_ = 0;
  clear_has_sectorindex();
}
inline ::google::protobuf::int32 SectorSpectrum::sectorindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.SectorSpectrum.sectorIndex)
  return sectorindex_;
}
inline void SectorSpectrum::set_sectorindex(::google::protobuf::int32 value) {
  set_has_sectorindex();
  sectorindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.SectorSpectrum.sectorIndex)
}

// repeated .com.zhichenhaixin.proto.LineSpectrum lineSpectrums = 2;
inline int SectorSpectrum::linespectrums_size() const {
  return linespectrums_.size();
}
inline void SectorSpectrum::clear_linespectrums() {
  linespectrums_.Clear();
}
inline const ::com::zhichenhaixin::proto::LineSpectrum& SectorSpectrum::linespectrums(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Get(index);
}
inline ::com::zhichenhaixin::proto::LineSpectrum* SectorSpectrum::mutable_linespectrums(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::LineSpectrum* SectorSpectrum::add_linespectrums() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >&
SectorSpectrum::linespectrums() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >*
SectorSpectrum::mutable_linespectrums() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return &linespectrums_;
}

// -------------------------------------------------------------------

// RadarVideo

// required int32 flag = 1;
inline bool RadarVideo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 RadarVideo::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.flag)
  return flag_;
}
inline void RadarVideo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.flag)
}

// required string sourceId = 2;
inline bool RadarVideo::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideo::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideo::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideo::clear_sourceid() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_->clear();
  }
  clear_has_sourceid();
}
inline const ::std::string& RadarVideo::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.sourceId)
  return *sourceid_;
}
inline void RadarVideo::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.sourceId)
}
inline void RadarVideo::set_sourceid(const char* value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.sourceId)
}
inline void RadarVideo::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.sourceId)
}
inline ::std::string* RadarVideo::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.sourceId)
  return sourceid_;
}
inline ::std::string* RadarVideo::release_sourceid() {
  clear_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourceid_;
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (sourceid) {
    set_has_sourceid();
    sourceid_ = sourceid;
  } else {
    clear_has_sourceid();
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarVideo::has_utc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideo::set_has_utc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideo::clear_has_utc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideo::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.UTC)
  return utc_;
}
inline void RadarVideo::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.UTC)
}

// required int32 length = 4;
inline bool RadarVideo::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideo::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideo::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideo::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarVideo::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.length)
  return length_;
}
inline void RadarVideo::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.length)
}

// repeated .com.zhichenhaixin.proto.SectorSpectrum sectorSpectrums = 5;
inline int RadarVideo::sectorspectrums_size() const {
  return sectorspectrums_.size();
}
inline void RadarVideo::clear_sectorspectrums() {
  sectorspectrums_.Clear();
}
inline const ::com::zhichenhaixin::proto::SectorSpectrum& RadarVideo::sectorspectrums(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.sectorSpectrums)
  return sectorspectrums_.Get(index);
}
inline ::com::zhichenhaixin::proto::SectorSpectrum* RadarVideo::mutable_sectorspectrums(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.sectorSpectrums)
  return sectorspectrums_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::SectorSpectrum* RadarVideo::add_sectorspectrums() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarVideo.sectorSpectrums)
  return sectorspectrums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::SectorSpectrum >&
RadarVideo::sectorspectrums() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarVideo.sectorSpectrums)
  return sectorspectrums_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::SectorSpectrum >*
RadarVideo::mutable_sectorspectrums() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarVideo.sectorSpectrums)
  return &sectorspectrums_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::MSGTYP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::MSGTYP>() {
  return ::com::zhichenhaixin::proto::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CNF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CNF>() {
  return ::com::zhichenhaixin::proto::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CST>() {
  return ::com::zhichenhaixin::proto::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::STH> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::STH>() {
  return ::com::zhichenhaixin::proto::STH_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadar_2eproto__INCLUDED
